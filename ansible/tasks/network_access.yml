---
- name: "package : ensure that repositories are up to date"
  apt:
    update_cache: true
    cache_valid_time: "{{ network_access_cache_seconds }}"

- name: "package : install packages for network_access"
  package:
    name: "{{ network_access_packages }}"
    state: present
  register: network_access_package_res
  retries: 5
  until: network_access_package_res is success

- name: "modprobe : enable br_netfilter"
  command: modprobe br_netfilter
  ignore_errors: true

- name: "sysctl : disable IPv6"
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6

- name: "sysctl : Disable iptables on bridge interfaces"
  sysctl:
    name: "{{ item }}"
    value: 1
    state: present
  with_items:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

  # notify:
  #   - restart network
- name: "ufw : allow forwarded traffic"
  ufw:
    direction: routed
    default: allow
    route: true
  notify:
    - reload ufw

- name: "ufw : allow outgoing traffic"
  ufw:
    direction: outgoing
    proto: any
    policy: allow
    comment: "Allow outgoing"
  notify:
    - reload ufw

- name: "ufw : allow OpenVPN udp traffic (in)"
  ufw:
    rule: allow
    direction: in
    proto: udp
    port: "1194"
    log: true
    comment: "OpenVPN incoming"
  notify:
    - reload ufw

- name: "ufw : allow access from private networks"
  ufw:
    rule: allow
    from_ip: "{{ item.cidr }}"
    comment: "{{ item.comment }}"
  with_items:
    - cidr: 10.0.0.0/8
      comment: "Private network : RFC1918"
    - cidr: 172.16.0.0/12
      comment: "Private network : RFC1918"
    - cidr: 192.168.0.0/16
      comment: "Private network : RFC1918"
    - cidr: 127.0.0.0/8
      comment: "Special-Use IPv4 Addresses : RFC3330"
  notify:
    - reload ufw

- name: "ufw : deny ssh connections if ip fails 6+ times in 30 seconds."
  ufw:
    rule: limit
    port: ssh
    proto: tcp
    comment: "basic brute force protection"
    log: true
  notify:
    - reload ufw

- name: "ufw : allow OpenSSH"
  ufw:
    rule: allow
    name: OpenSSH
    comment: "OpenSSH"
    log: true
  notify:
    - reload ufw

- name: "ufw : deny all access to port 22"
  ufw:
    port: "22"
    rule: deny
    comment: "old SSH port"
  notify:
    - reload ufw

- name: "ufw : allow incoming web traffic"
  ufw:
    proto: tcp
    rule: allow
    port: "{{ item.port }}"
    comment: "{{ item.comment }}"
  with_items:
    - port: 443
      comment: "HTTPS"
    - port: 80
      comment: "HTTP"
    - port: 8080
      comment: "HTTP Dev"
    - port: 9100
      comment: "Prometheus node_exporter"
  notify:
    - reload ufw

- name: "ufw : deny other incoming"
  ufw:
    direction: incoming
    proto: any
    policy: deny
    comment: "Deny incoming"
  notify:
    - reload ufw

- name: "ufw : enable ufw logging"
  ufw:
    logging: high

- name: "ufw : enable ufw service"
  ufw:
    state: enabled

- name: "ssh : deny all host by default"
  blockinfile:
    path: /etc/hosts.deny
    block: |
      sshd: ALL
      DenyUsers: root huck

- name: "ssh : allow only internal hosts"
  blockinfile:
    path: /etc/hosts.allow
    block: |
      sshd: 127.0.0.0/255.0.0.0
      sshd: 10.0.0.0/255.0.0.0
      sshd: 192.168.0.0/255.255.0.0
      sshd: 172.16.0.0/255.240.0.0
  notify:
    - restart ssh

- name: "ssh : configure network banner"
  template:
    src: ssh/network-banner.j2
    dest: "{{ item }}"
    mode: 0600
    owner: root
    group: root
  with_items:
    - /etc/ssh/banner.txt
    - /etc/issue.net

- name: "ssh : update local banners"
  template:
    src: ssh/local-banner.j2
    dest: /etc/issue
    mode: 0600
    owner: root
    group: root

- name: "ssh : remove host-key algorithms"
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^HostKey /etc/ssh/ssh_host_ecdsa_key"
    state: absent
  notify:
    - restart ssh

- name: "ssh : set maxsessions to {{ network_access_ssh_max_sessions }}"
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^MaxSessions"
    line: "MaxSessions {{ network_access_ssh_max_sessions }}"
  notify:
    - restart ssh

- name: "fail2ban : create auth log"
  command: touch "{{ network_access_fail2ban_logtarget }}"
  args:
    creates: "{{ network_access_fail2ban_logtarget }}"
    warn: false

- name: "fail2ban : update config"
  template:
    src: "fail2ban/{{ item }}.j2"
    dest: /etc/fail2ban/{{ item }}
  with_items:
    - jail.local
    - fail2ban.local
  notify:
    - restart fail2ban

- name: "fail2ban : update actions"
  template:
    src: "fail2ban/actions/{{ item }}.j2"
    dest: /etc/fail2ban/action.d/{{ item }}
  with_items:
    - complain.conf
    - pushover.conf
  notify:
    - restart fail2ban

- name: "fail2ban : ensure filters are configured"
  template:
    src: "fail2ban/filters/{{ item }}.j2"
    dest: /etc/fail2ban/filter.d/{{ item }}
  with_items:
    - sshd.conf
    - sshd-user-ban.conf
    # - traefik-auth.conf
    # - traefik-botsearch.conf
  notify:
    - restart fail2ban

# - name: "fail2ban : Ensure fail2ban jails are configured
#   template:
#     src: "jails/{{ item }}.j2"
#     dest: /etc/fail2ban/jail.d/{{ item }}
#   with_items:
#     - traefik.conf
#   notify:
#     - restart fail2ban

- name: "fail2ban : ensure service starts when machine is rebooted"
  service:
    name: fail2ban
    state: started
    enabled: true
